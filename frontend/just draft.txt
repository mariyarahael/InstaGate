const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const dotenv = require("dotenv");
const bcrypt = require("bcrypt");

// Load environment variables
dotenv.config();

const app = express();
app.use(express.json());
app.use(cors());

// Get MongoDB URI from .env file
const MONGO_URI = process.env.MONGO_URI;
const PORT = process.env.PORT || 5000;

if (!MONGO_URI) {
  console.error("❌ MONGO_URI is not defined. Check your .env file.");
  process.exit(1);
}

// Connect to MongoDB
mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log("✅ Connected to MongoDB"))
    .catch(err => {
        console.error("❌ MongoDB connection error:", err);
        process.exit(1);
    });

// Define Student Schema
const StudentSchema = new mongoose.Schema({
    fullName: { type: String, required: true },
    studyYear: { type: String, required: true },
    department: { type: String, required: true },
    address: { type: String, required: true },
    hostelName: { type: String, required: true },
    hostelRoom: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    phoneNumber: { type: String, required: true },
    password: { type: String, required: true },
});

const StudentModel = mongoose.model("Student", StudentSchema);

// Define Parent Schema
const ParentSchema = new mongoose.Schema({
    parName: { type: String, required: true },
    childName: { type: String, required: true },
    childDep: { type: String, required: true },
    address: { type: String, required: true },
    parRole: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    phone: { type: String, required: true },
    password: { type: String, required: true },
});

const ParentModel = mongoose.model("Parent", ParentSchema);

// Register Student (POST /register)
app.post("/register", async (req, res) => {
    try {
        const { fullName, studyYear, department, address, hostelName, hostelRoom, email, phoneNumber, password } = req.body;

        const existingStudent = await StudentModel.findOne({ email });
        if (existingStudent) {
            return res.status(400).json({ error: "Email already registered" });
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        const newStudent = new StudentModel({
            fullName, studyYear, department, address, hostelName, hostelRoom, email, phoneNumber, password: hashedPassword
        });

        await newStudent.save();
        res.status(201).json({ message: "✅ Student registered successfully!", student: newStudent });
    } catch (error) {
        res.status(500).json({ error: "❌ Error registering student", details: error.message });
    }
});

// Register Parent (POST /register-parent)
app.post("/register-parent", async (req, res) => {
    try {
        const { parName, childName, childDep, address, parRole, email, phone, password } = req.body;

        const existingParent = await ParentModel.findOne({ email });
        if (existingParent) {
            return res.status(400).json({ error: "Email already registered" });
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        const newParent = new ParentModel({
            parName, childName, childDep, address, parRole, email, phone, password: hashedPassword
        });

        await newParent.save();
        res.status(201).json({ message: "✅ Parent registered successfully!", parent: newParent });
    } catch (error) {
        res.status(500).json({ error: "❌ Error registering parent", details: error.message });
    }
});

// Get all students (GET /students)
app.get("/students", async (req, res) => {
    try {
        const students = await StudentModel.find();
        res.json(students);
    } catch (error) {
        res.status(500).json({ error: "❌ Error fetching students", details: error.message });
    }
});

// Get all parents (GET /parents)
app.get("/parents", async (req, res) => {
    try {
        const parents = await ParentModel.find();
        res.json(parents);
    } catch (error) {
        res.status(500).json({ error: "❌ Error fetching parents", details: error.message });
    }
});

// Start server (Only One)
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));















